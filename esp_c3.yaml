substitutions:
  name: esphome_c31
esphome:
  name: $name
  platformio_options:
    board_build.flash_mode: dio  
esp32:
  board: esp32-c3-devkitm-1
  variant: ESP32C3
  framework:
    type: esp-idf
    sdkconfig_options:
      CONFIG_ESP_CONSOLE_USB_CDC: y

# Enable logging
logger:
  hardware_uart: USB_SERIAL_JTAG

# Enable Home Assistant API
api:

ota:

# web_server:
#  port: 80

wifi:
  ssid: !secret wifi_iot_ssid
  password: !secret wifi_iot_password
  output_power: "8.5"


  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: $name
    password: $name

# captive_portal:

# Example configuration entry
light:
  - platform: status_led
    name: "Switch state"
    pin: 7

i2c:
  sda: 8
  scl: 10
font:
  - file: "font/monofont.ttf"
    id: opensans
    size: 12

display:
  - platform: ssd1306_i2c
    id: oled
    model: "SSD1306 128x32"
    pages:
      - id: page1
        lambda: |-
          it.printf(0, 0, id(opensans), "Hum.ty: %.1f \%", id(humidity).state);
          it.printf(0, 11, id(opensans), "Temp: %.2fÂ°C", id(temp).state);
          it.printf(0, 22, id(opensans), "Illum: %.1f", id(illuminance).state);
sensor:
  - platform: sht3xd
    temperature:
      id: temp
      name: "Temperature"
      filters:
      - sliding_window_moving_average:
          window_size: 15
          send_every: 5
    humidity:
      id: humidity
      name: "Humidity"
      filters:
      - sliding_window_moving_average:
          window_size: 15
          send_every: 5
    address: 0x45
    update_interval: 1s

  - platform: bh1750
    id: illuminance
    name: "Illuminance"
    address: 0x23
    update_interval: 5s
  - platform: uptime
    name: Uptime Sensor
    id: uptime_sensor
    update_interval: 60s
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: uptime_human
            state: !lambda |-
              int seconds = round(id(uptime_sensor).raw_state);
              int days = seconds / (24 * 3600);
              seconds = seconds % (24 * 3600);
              int hours = seconds / 3600;
              seconds = seconds % 3600;
              int minutes = seconds /  60;
              seconds = seconds % 60;
              return (
                (days ? to_string(days) + "d " : "") +
                (hours ? to_string(hours) + "h " : "") +
                (minutes ? to_string(minutes) + "m " : "") +
                (to_string(seconds) + "s")
              ).c_str();
text_sensor:
  - platform: template
    name: Uptime Human Readable
    id: uptime_human
    icon: mdi:clock-start
