---

esphome:
  name: $name
  name_add_mac_suffix: true
  platformio_options:
    board_build.flash_mode: dio

esp32:
  board: esp32-c3-devkitm-1
  variant: esp32c3
  framework:
    type: arduino

logger:
  level: DEBUG

# Enable Home Assistant API
api:

ota:

i2c:
  sda: ${gpio_sda}
  scl: ${gpio_scl}
  scan: true
  frequency: 50kHz
web_server:
  port: 80
external_components:
  - source: github://dentra/esphome-components
backup:
  auth:
    username: !secret web_username
    password: !secret web_password
  force_update: false

wifi:
  ssid: !secret wifi_iot_ssid
  password: !secret wifi_iot_password
  use_address: ${ip}
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: $name
    password: $name

captive_portal:

sensor:
  - platform: wifi_signal
    name: "WiFi Signal Sensor"
    update_interval: 15s
    filters:
      - sliding_window_moving_average:
          window_size: 4
          send_every: 2
    id: wifi_rssi
  - platform: uptime
    name: Uptime Sensor
    id: uptime_sensor
    update_interval: 10s
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: uptime_human
            state: !lambda |-
              int seconds = round(id(uptime_sensor).raw_state);
              int days = seconds / (24 * 3600);
              seconds = seconds % (24 * 3600);
              int hours = seconds / 3600;
              seconds = seconds % 3600;
              int minutes = seconds /  60;
              seconds = seconds % 60;
              return (
                (days ? to_string(days) + "d " : "") +
                (hours ? to_string(hours) + "h " : "") +
                (minutes ? to_string(minutes) + "m " : "") +
                (to_string(seconds) + "s")
              ).c_str();

text_sensor:
  - platform: template
    name: Uptime Human Readable
    id: uptime_human
    icon: mdi:clock-start

time:
  - platform: sntp
    id: sntp_time